using Microsoft.VisualStudio.TestTools.UnitTesting;
using Triumph.J1939;
using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography;
using ZLG.CAN;

namespace Triumph.J1939.Tests
{
    [TestClass()]
    public class ElectronicControlUnitTests
    {
        J1939_21UsbCanII j1939tp;
        J1939Client client = new J1939Client();
        USBCanIICommunication can = new USBCanIICommunication();
        [TestInitialize]
        public void Init()
        {
            can.SetPara(new ZLGCANPara()
            {
                deviceIndex = 1,
                deviceInfoIndex = ZLG.CAN.Models.DeviceInfoIndex.ZCAN_USBCAN2,
                kBaudrates = [ZLG.CAN.Models.KBaudrate._500kbps, ZLG.CAN.Models.KBaudrate._500kbps],
                frameType = [ZLG.CAN.Models.FrameType.Extended, ZLG.CAN.Models.FrameType.Extended]
            });
            can.Open();
            var isOpen = can.IsOpen;
            Assert.AreEqual(true, isOpen);
            j1939tp = new J1939_21UsbCanII(can, 0xA1, 0xF4);
            //j1939tp.LoggerInfo += ;
            client.tp = j1939tp;
        }

        [TestCleanup]
        public void Dispose()
        {
            can.Close();
        }

        [TestMethod()]
        public void SendRequest()
        {
            client.SendRequest(0, 0x007100);
            client.SendRequest(0, 0x007100);
            client.SendRequest(0, 0x007100);
        }

        //[TestMethod()]
        //public void SendDataTest()
        //{
        //    //for (int j = 0; j < 10; j++)
        //    {
        //        byte[] data =
        //        [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        //        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        //        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
        //        0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
        //        0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23,
        //        0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
        //        0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31,
        //        0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        //        0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
        //        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
        //        0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
        //        0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54,
        //        0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, ];
        //        client.SendData(0x007100, data);
        //        //ecu.JobThread();
        //        Thread.Sleep(10);
        //        j1939tp.Notify(0x1CECA1F4, [0x11, 0x10, 0x01, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //        Thread.Sleep(10);
        //        for (int i = 0; i < 13; i++)
        //        {
        //            j1939tp.JobThread();
        //            if (i == 10)
        //            {
        //                j1939tp.Notify(0x1CECA1F4, [0x11, 0x00, 0x0B, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //                Thread.Sleep(200);
        //                j1939tp.Notify(0x1CECA1F4, [0x11, 0x03, 0x0B, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //            }
        //        }
        //        j1939tp.Notify(0x1CECA1F4, [0x13, 0x5a, 0x00, 0x0D, 0xFF, 0x00, 0x71, 0x00], 0);
        //        j1939tp.JobThread();
        //        Assert.AreEqual(data, j1939tp.link.SendBuf);
        //        Assert.AreEqual(data.Length, j1939tp.link.SendBufSize);
        //        Assert.AreEqual(SendBufferState.FINISHED, j1939tp.link.SendStatus);
        //        Console.WriteLine($"{new string('-', 10)}第二组测试{new string('-', 10)}");
        //        byte[] data2 =
        //            [
        //                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        //                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        //                0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
        //                0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C,
        //                0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23,
        //                0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
        //                0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31,
        //                0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        //                0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
        //                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
        //                0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
        //                0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54,
        //                0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B,
        //                0x5C, 0x5D, 0x5E, 0x5F
        //            ];
        //        client.SendData(0x007100, data2);
        //        //ecu.JobThread();
        //        Thread.Sleep(10);
        //        j1939tp.Notify(0x1CECA1F4, [0x11, 0x10, 0x01, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //        Thread.Sleep(10);
        //        for (int i = 0; i < 14; i++)
        //        {
        //            j1939tp.JobThread();
        //            if (i == 10)
        //            {
        //                j1939tp.Notify(0x1CECA1F4, [0x11, 0x00, 0x0B, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //                Thread.Sleep(200);
        //                j1939tp.Notify(0x1CECA1F4, [0x11, 0x04, 0x0B, 0xFF, 0xFF, 0x00, 0x71, 0x00], 0);
        //            }
        //        }
        //        j1939tp.Notify(0x1CECA1F4, [0x13, 0x5F, 0x00, 0x0E, 0xFF, 0x00, 0x71, 0x00], 0);
        //        j1939tp.JobThread();
        //        Assert.AreEqual(data2, j1939tp.link.SendBuf);
        //        Assert.AreEqual(data2.Length, j1939tp.link.SendBufSize);
        //        Assert.AreEqual(SendBufferState.FINISHED, j1939tp.link.SendStatus);
        //    }
        //}
        //[TestMethod()]
        //public void ReceiveDataTest()
        //{
        //    client.SendRequest(0, 0x007100);
        //    Thread.Sleep(100);
        //    j1939tp.Notify(0x1CECA1F4, [0x10, 0x5A, 0x00, 0x0D, 0xFF, 0x00, 0x71, 0x00], 0);
        //    j1939tp.JobThread();
        //    Thread.Sleep(10);
        //    j1939tp.Notify(0x1CEBA1F4, [0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x02, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x03, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x04, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x05, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x06, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x07, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x08, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x09, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x0A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x0B, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x0C, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54], 0);
        //    j1939tp.JobThread();
        //    j1939tp.Notify(0x1CEBA1F4, [0x0D, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x00], 0);
        //    j1939tp.JobThread();
        //    Console.WriteLine(BitConverter.ToString(j1939tp.link.RecvBuf, 0, j1939tp.link.RecvBufSize));
        //    Assert.AreEqual(90, j1939tp.link.RecvBufSize);
        //    Assert.AreEqual(RecvBufferState.FINISHED, j1939tp.link.RecvStatus);
        //}

        [TestMethod()]
        public void ReceiveDataFromZCANProTest()
        {
            client.SendRequest(0, 0x007100);
            Thread.Sleep(30);
            while (client.state != J1939Client.Idle)
            {
                Thread.Sleep(10);
                client.Poll();
            }
            Console.WriteLine($"接收总报文:{BitConverter.ToString(client.RecvBuffer)}");
        }
        [TestMethod]
        public void SendDataToZCANProTest()
        {
            byte[] data = 
                [0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,
                 0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
                0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,
                0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,
                0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,
                0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,
                0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
                0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,
                0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
                0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,
                0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,
                0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,
                0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,
                0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
                0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,
                0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
                0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,
                0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,
                0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,
                0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,
                0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,
                0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,
                0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,
                0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,
                0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,
                0x00,0x00,0x00,0x00,0xEE,0x02,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x10,0x27,0x00,0x00];
            client.SendData(0x007100, data);
            Thread.Sleep(30);

            while (client.state != J1939Client.Idle)
            {
                Thread.Sleep(10);
                client.Poll();
            }

            //client.SendData(0x007100, data);
            //Thread.Sleep(30);

            //while (client.state != J1939Client.Idle)
            //{
            //    Thread.Sleep(10);
            //    client.Poll();
            //}
        }
        [TestMethod()]
        public void TestMessageId()
        {
            ParameterGroupNumber pgn = new ParameterGroupNumber(0, 0xEB, 0xA1);
            MessageId mid = new MessageId(7, pgn.Value, 0xF4);
            Console.WriteLine(mid.CanId.ToString("X"));
        }
    }
}